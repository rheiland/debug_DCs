%!PS-Adobe-
%%DocumentFonts: Courier Courier-Bold
% PSP prologue file, version 1.0
%
% Copyright (c) 1989 Eric J. Kostelich
%
save
/PSPstart {} def
/p {	3 1 roll
	Linespacing mul Textoffset exch sub
	exch Textwidth Leftmargin add mul Leftmargin add
	exch moveto show 
} def

/Setbold { /Courier-Bold findfont Boldsize scalefont setfont } def
/SF { /Courier findfont Pointsize scalefont setfont } def
%
% (string) H  - for placing boldface titles
%
/H { Setbold Leftmargin Titleoffset moveto show SF } def
%
%  Normal mode - use titles, 54 lines/page
%
/Usual {/Leftmargin 66 def  /Textoffset 708 def /Titleoffset 738 def
	/Boldsize 12 def  /Pointsize 10 def /Linespacing 12 def
	/Textwidth 480 def /Rotatemode false def
} def
%
%  Plain mode - no titles, 66 lines/page
%
/Plain {/Leftmargin 72 def  /Textoffset 756 def
	/Boldsize 14 def  /Pointsize 9 def /Linespacing 11 def
	/Textwidth 480 def /Rotatemode false def
} def
%
% Rotated, two-column mode - 65 lines/column
%
/Rotated { /Rotatemode true def } def
/Rotatepage { 612 0 translate 90 rotate
	/Leftmargin 36 def /Textoffset 550 def /Titleoffset 568 def
	/Boldsize 12 def  /Pointsize 7 def  /Linespacing 8 def
	/Textwidth 336 def
} def
/Startpage { Rotatemode {Rotatepage} if SF } def
/Endpage {showpage} def
/PSPend {restore} def
%%EndPrologue
Rotated
%%Page 1 1
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       1)H
0 0(/*)p
0 1(#############################################################################)p
0 2(# If you use BioFVM in your project, please cite BioFVM and the version     #)p
0 3(# number, such as below:                                                    #)p
0 4(#                                                                           #)p
0 5(# We solved the diffusion equations using BioFVM \(Version 1.1.7\) [1]        #)p
0 6(#                                                                           #)p
0 7(# [1] A. Ghaffarizadeh, S.H. Friedman, and P. Macklin, BioFVM: an efficient #)p
0 8(#    parallelized diffusive transport solver for 3-D biological simulations,#)p
0 9(#    Bioinformatics 32\(8\): 1256-8, 2016. DOI: 10.1093/bioinformatics/btv730 #)p
0 10(#                                                                           #)p
0 11(#############################################################################)p
0 12(#                                                                           #)p
0 13(# BSD 3-Clause License \(see https://opensource.org/licenses/BSD-3-Clause\)   #)p
0 14(#                                                                           #)p
0 15(# Copyright \(c\) 2015-2017, Paul Macklin and the BioFVM Project              #)p
0 16(# All rights reserved.                                                      #)p
0 17(#                                                                           #)p
0 18(# Redistribution and use in source and binary forms, with or without        #)p
0 19(# modification, are permitted provided that the following conditions are    #)p
0 20(# met:                                                                      #)p
0 21(#                                                                           #)p
0 22(# 1. Redistributions of source code must retain the above copyright notice, #)p
0 23(# this list of conditions and the following disclaimer.                     #)p
0 24(#                                                                           #)p
0 25(# 2. Redistributions in binary form must reproduce the above copyright      #)p
0 26(# notice, this list of conditions and the following disclaimer in the       #)p
0 27(# documentation and/or other materials provided with the distribution.      #)p
0 28(#                                                                           #)p
0 29(# 3. Neither the name of the copyright holder nor the names of its          #)p
0 30(# contributors may be used to endorse or promote products derived from this #)p
0 31(# software without specific prior written permission.                       #)p
0 32(#                                                                           #)p
0 33(# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       #)p
0 34(# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED #)p
0 35(# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A           #)p
0 36(# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER #)p
0 37(# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  #)p
0 38(# EXEMPLARY, OR CONSEQUENTIAL DAMAGES \(INCLUDING, BUT NOT LIMITED TO,       #)p
0 39(# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR        #)p
0 40(# PROFITS; OR BUSINESS INTERRUPTION\) HOWEVER CAUSED AND ON ANY THEORY OF    #)p
0 41(# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \(INCLUDING      #)p
0 42(# NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY OUT OF THE USE OF THIS        #)p
0 43(# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              #)p
0 44(#                                                                           #)p
0 45(#############################################################################)p
0 46(*/)p
0 48(#include "BioFVM_microenvironment.h")p
0 49(#include "BioFVM_solvers.h")p
0 50(#include "BioFVM_vector.h")p
0 51(#include <cmath>)p
0 53(#include "BioFVM_basic_agent.h")p
0 55(namespace BioFVM{)p
0 57(extern std::string BioFVM_version;)p
0 58(extern std::string BioFVM_URL;)p
0 60(Microenvironment* default_microenvironment = NULL;)p
0 62(void set_default_microenvironment\( Microenvironment* M \))p
0 63({ default_microenvironment = M; })p
0 64(Microenvironment* get_default_microenvironment\( void \))p
1 0({ return default_microenvironment; })p
1 2(void zero_function\( std::vector<double>& position, std::vector<double>& input ,)p
1 3(std::vector<double>* write_destination \))p
1 4({)p
1 5(        for\( unsigned int i=0 ; i < write_destination->size\(\) ; i++ \))p
1 6(        { \(*write_destination\)[i] = 0.0; })p
1 7(        return;)p
1 8(})p
1 10(void one_function\( std::vector<double>& position, std::vector<double>& input , s)p
1 11(td::vector<double>* write_destination \))p
1 12({)p
1 13(        for\( unsigned int i=0 ; i < write_destination->size\(\) ; i++ \))p
1 14(        { \(*write_destination\)[i] = 1.0; })p
1 15(        return;)p
1 16(})p
1 18(void zero_function\( Microenvironment* pMicroenvironment, int voxel_index, std::v)p
1 19(ector<double>* write_destination \))p
1 20({)p
1 21(        for\( unsigned int i=0 ; i < write_destination->size\(\) ; i++ \))p
1 22(        { \(*write_destination\)[i] = 0.0; })p
1 23(        return;)p
1 24(})p
1 26(void one_function\( Microenvironment* pMicroenvironment, int voxel_index, std::ve)p
1 27(ctor<double>* write_destination \))p
1 28({)p
1 29(        for\( unsigned int i=0 ; i < write_destination->size\(\) ; i++ \))p
1 30(        { \(*write_destination\)[i] = 1.0; })p
1 31(        return;)p
1 32(})p
1 34(void empty_diffusion_solver\( Microenvironment& S, double dt \))p
1 35({)p
1 36(        static bool setup_done = false;)p
1 37(        if\( !setup_done \))p
1 38(        {)p
1 39(                std::cout << "Using the empty diffusion solver ... " << std::end)p
1 40(l;)p
1 41(                setup_done = true;)p
1 42(        })p
1 44(        return;)p
1 45(})p
1 47(Microenvironment::Microenvironment\(\))p
1 48({)p
1 49(        name = "unnamed";)p
1 50(        spatial_units = "none";)p
1 51(        time_units = "none";)p
1 53(        bulk_source_sink_solver_setup_done = false;)p
1 54(        thomas_setup_done = false;)p
1 55(        diffusion_solver_setup_done = false;)p
1 57(        diffusion_decay_solver = empty_diffusion_solver;)p
1 58(        diffusion_decay_solver = diffusion_decay_solver__constant_coefficients_L)p
1 59(OD_3D;)p
1 61(        mesh.resize\(1,1,1\);)p
1 63(        one.resize\( 1 , 1.0 \);)p
1 64(        zero.resize\( 1 , 0.0 \);)p
Endpage
%%Page 3 2
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       2)H
0 1(        temporary_density_vectors1.resize\( mesh.voxels.size\(\) , zero \);)p
0 2(        temporary_density_vectors2.resize\( mesh.voxels.size\(\) , zero \);)p
0 3(        p_density_vectors = &temporary_density_vectors1;)p
0 5(        gradient_vectors.resize\( mesh.voxels.size\(\) \);)p
0 6(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 7(        {)p
0 8(                gradient_vectors[k].resize\( 1 \);)p
0 9(                \(gradient_vectors[k]\)[0].resize\( 3, 0.0 \);)p
0 10(        })p
0 11(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
0 13(        bulk_supply_rate_function = zero_function;)p
0 14(        bulk_supply_target_densities_function = zero_function;)p
0 15(        bulk_uptake_rate_function = zero_function;)p
0 17(        density_names.assign\( 1 , "unnamed" \);)p
0 18(        density_units.assign\( 1 , "none" \);)p
0 20(        diffusion_coefficients.assign\( number_of_densities\(\) , 0.0 \);)p
0 21(        decay_rates.assign\( number_of_densities\(\) , 0.0 \);)p
0 23(        one_half = one;)p
0 24(        one_half *= 0.5;)p
0 26(        one_third = one;)p
0 27(        one_third /= 3.0;)p
0 29(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
0 30(        dirichlet_activation_vector.assign\( 1 , true \);)p
0 32(        dirichlet_activation_vectors.assign\( 1 , dirichlet_activation_vector \);)p
0 34(        default_microenvironment_options.Dirichlet_all.assign\( 1 , true \);)p
0 35(        default_microenvironment_options.Dirichlet_xmin.assign\( 1 , false \);)p
0 36(        default_microenvironment_options.Dirichlet_xmax.assign\( 1 , false \);)p
0 37(        default_microenvironment_options.Dirichlet_ymin.assign\( 1 , false \);)p
0 38(        default_microenvironment_options.Dirichlet_ymax.assign\( 1 , false \);)p
0 39(        default_microenvironment_options.Dirichlet_zmin.assign\( 1 , false \);)p
0 40(        default_microenvironment_options.Dirichlet_zmax.assign\( 1 , false \);)p
0 42(        default_microenvironment_options.Dirichlet_xmin_values.assign\( 1 , 1.0 \))p
0 43(;)p
0 44(        default_microenvironment_options.Dirichlet_xmax_values.assign\( 1 , 1.0 \))p
0 45(;)p
0 46(        default_microenvironment_options.Dirichlet_ymin_values.assign\( 1 , 1.0 \))p
0 47(;)p
0 48(        default_microenvironment_options.Dirichlet_ymax_values.assign\( 1 , 1.0 \))p
0 49(;)p
0 50(        default_microenvironment_options.Dirichlet_zmin_values.assign\( 1 , 1.0 \))p
0 51(;)p
0 52(        default_microenvironment_options.Dirichlet_zmax_values.assign\( 1 , 1.0 \))p
0 53(;)p
0 55(        if\(default_microenvironment==NULL\))p
0 56(        { default_microenvironment=this; })p
0 58(        return;)p
0 59(})p
0 61(Microenvironment::Microenvironment\(std::string name\))p
0 62({)p
0 63(        Microenvironment\(\);)p
0 64(        this->name=name;)p
1 1(        return;)p
1 2(})p
1 4(void Microenvironment::add_dirichlet_node\( int voxel_index, std::vector<double>&)p
1 5( value \))p
1 6({)p
1 7(        mesh.voxels[voxel_index].is_Dirichlet=true;)p
1 8(        /*)p
1 9(        dirichlet_indices.push_back\( voxel_index \);)p
1 10(        dirichlet_value_vectors.push_back\( value \);)p
1 11(        */)p
1 13(        dirichlet_value_vectors[voxel_index] = value; // .assign\( mesh.voxels.si)p
1 14(ze\(\), one \);)p
1 16(        return;)p
1 17(})p
1 19(void Microenvironment::update_dirichlet_node\( int voxel_index , std::vector<doub)p
1 20(le>& new_value \))p
1 21({)p
1 22(        mesh.voxels[voxel_index].is_Dirichlet = true;)p
1 23(        dirichlet_value_vectors[voxel_index] = new_value;)p
1 25(        return;)p
1 26(})p
1 28(void Microenvironment::update_dirichlet_node\( int voxel_index , int substrate_in)p
1 29(dex , double new_value \))p
1 30({)p
1 31(        mesh.voxels[voxel_index].is_Dirichlet = true;)p
1 32(        dirichlet_value_vectors[voxel_index][substrate_index] = new_value;)p
1 34(        dirichlet_activation_vectors[voxel_index][substrate_index] = true;)p
1 36(        return;)p
1 37(})p
1 39(void Microenvironment::remove_dirichlet_node\( int voxel_index \))p
1 40({)p
1 41(        mesh.voxels[voxel_index].is_Dirichlet = false;)p
1 43(        return;)p
1 44(})p
1 46(bool& Microenvironment::is_dirichlet_node\( int voxel_index \))p
1 47({)p
1 48(        return mesh.voxels[voxel_index].is_Dirichlet;)p
1 49(})p
1 51(void Microenvironment::set_substrate_dirichlet_activation\( int substrate_index ,)p
1 52( bool new_value \))p
1 53({)p
1 54(        dirichlet_activation_vector[substrate_index] = new_value;)p
1 56(        for\( int n = 0 ; n < mesh.voxels.size\(\) ; n++ \))p
1 57(        { dirichlet_activation_vectors[n][substrate_index] = new_value; })p
1 59(        return;)p
1 60(})p
1 62(void Microenvironment::set_substrate_dirichlet_activation\( int index, std::vecto)p
1 63(r<bool>& new_value \))p
1 64({)p
Endpage
%%Page 5 3
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       3)H
0 0(        dirichlet_activation_vectors[index] = new_value;)p
0 1(        return;)p
0 2(})p
0 5(bool Microenvironment::get_substrate_dirichlet_activation\( int substrate_index \))p
0 6({)p
0 7(        return dirichlet_activation_vector[substrate_index];)p
0 8(})p
0 10(// new functions for finer-grained control of Dirichlet conditions -- 1.7.0)p
0 12(void Microenvironment::set_substrate_dirichlet_activation\( int substrate_index ,)p
0 13( int index, bool new_value \))p
0 14({)p
0 15(        dirichlet_activation_vectors[index][substrate_index] = new_value;)p
0 16(        return;)p
0 17(})p
0 19(bool Microenvironment::get_substrate_dirichlet_activation\( int substrate_index,)p
0 20(int index \))p
0 21({ return dirichlet_activation_vectors[index][substrate_index]; })p
0 23(void Microenvironment::apply_dirichlet_conditions\( void \))p
0 24({)p
0 25(        /*)p
0 26(        #pragma omp parallel for)p
0 27(        for\( unsigned int i=0 ; i < dirichlet_indices.size\(\) ; i++ \))p
0 28(        { density_vector\( dirichlet_indices[i] \) = dirichlet_value_vectors[i]; })p
0 29(        */)p
0 31(        // #pragma omp parallel for)p
0 32(        for\( unsigned int i=0 ; i < mesh.voxels.size\(\) ;i++ \))p
0 33(        {)p
0 34(                /*)p
0 35(                if\( mesh.voxels[i].is_Dirichlet == true \))p
0 36(                { density_vector\(i\) = dirichlet_value_vectors[i]; })p
0 37(                */)p
0 38(                if\( mesh.voxels[i].is_Dirichlet == true \))p
0 39(                {)p
0 40(                        for\( unsigned int j=0; j < dirichlet_value_vectors[i].si)p
0 41(ze\(\); j++ \))p
0 42(                        {)p
0 43(                                // if\( dirichlet_activation_vector[j] == true \))p
0 44(                                if\( dirichlet_activation_vectors[i][j] == true \))p
0 45(                                {)p
0 46(                                        density_vector\(i\)[j] = dirichlet_value_v)p
0 47(ectors[i][j];)p
0 48(                                })p
0 49(                        })p
0 51(                })p
0 52(        })p
0 53(        return;)p
0 54(})p
0 56(void Microenvironment::resize_voxels\( int new_number_of_voxes \))p
0 57({)p
0 58(        if\( mesh.Cartesian_mesh == true \))p
0 59(        {)p
0 60(                std::cout << "Error: only use Microenvironment::" << __FUNCTION_)p
0 61(_ << " as a fall-back for non-Cartesian meshes." << std::endl)p
0 62(                                  << "\\tUse one of the Microenvironment::resize_)p
0 63(space\(\) functions instead. Ignoring directive." << std::endl;)p
0 64(                return;)p
1 0(        })p
1 2(        mesh.voxels.resize\( new_number_of_voxes \);)p
1 4(        temporary_density_vectors1.resize\( mesh.voxels.size\(\) , zero \);)p
1 5(        temporary_density_vectors2.resize\( mesh.voxels.size\(\) , zero \);)p
1 7(        gradient_vectors.resize\( mesh.voxels.size\(\) \);)p
1 8(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
1 9(        {)p
1 10(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
1 11(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
1 12(                {)p
1 13(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
1 14(                })p
1 15(        })p
1 16(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
1 18(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
1 20(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\) , dirichlet_acti)p
1 21(vation_vector \);)p
1 23(        return;)p
1 24(})p
1 27(void Microenvironment::resize_space\( int x_nodes, int y_nodes, int z_nodes \))p
1 28({)p
1 29(        mesh.resize\( x_nodes, y_nodes , z_nodes \);)p
1 31(        temporary_density_vectors1.assign\( mesh.voxels.size\(\) , zero \);)p
1 32(        temporary_density_vectors2.assign\( mesh.voxels.size\(\) , zero \);)p
1 34(        gradient_vectors.resize\( mesh.voxels.size\(\) \);)p
1 35(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
1 36(        {)p
1 37(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
1 38(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
1 39(                {)p
1 40(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
1 41(                })p
1 42(        })p
1 43(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
1 45(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
1 47(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\) , dirichlet_acti)p
1 48(vation_vector \);)p
1 50(        return;)p
1 51(})p
1 53(void Microenvironment::resize_space\( double x_start, double x_end, double y_star)p
1 54(t, double y_end, double z_start, double z_end , int x_nodes, int y_nodes, int z_)p
1 55(nodes \))p
1 56({)p
1 57(        mesh.resize\( x_start, x_end, y_start, y_end, z_start, z_end, x_nodes, y_)p
1 58(nodes , z_nodes  \);)p
1 60(        temporary_density_vectors1.assign\( mesh.voxels.size\(\) , zero \);)p
1 61(        temporary_density_vectors2.assign\( mesh.voxels.size\(\) , zero \);)p
1 63(        gradient_vectors.resize\( mesh.voxels.size\(\) \);)p
1 64(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
Endpage
%%Page 7 4
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       4)H
0 0(        {)p
0 1(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
0 2(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
0 3(                {)p
0 4(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
0 5(                })p
0 6(        })p
0 7(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
0 9(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
0 11(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\) , dirichlet_acti)p
0 12(vation_vector \);)p
0 14(        return;)p
0 15(})p
0 17(void Microenvironment::resize_space\( double x_start, double x_end, double y_star)p
0 18(t, double y_end, double z_start, double z_end , double dx_new , double dy_new ,)p
0 19(double dz_new \))p
0 20({)p
0 21(        mesh.resize\( x_start, x_end, y_start, y_end, z_start, z_end,  dx_new , d)p
0 22(y_new , dz_new \);)p
0 24(        temporary_density_vectors1.assign\( mesh.voxels.size\(\) , zero \);)p
0 25(        temporary_density_vectors2.assign\( mesh.voxels.size\(\) , zero \);)p
0 27(        gradient_vectors.resize\( mesh.voxels.size\(\) \);)p
0 28(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 29(        {)p
0 30(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
0 31(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
0 32(                {)p
0 33(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
0 34(                })p
0 35(        })p
0 36(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
0 38(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
0 40(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\) , dirichlet_acti)p
0 41(vation_vector \);)p
0 43(        return;)p
0 44(})p
0 46(void Microenvironment::resize_space_uniform\( double x_start, double x_end, doubl)p
0 47(e y_start, double y_end, double z_start, double z_end , double dx_new \))p
0 48({)p
0 49( return resize_space\( x_start, x_end, y_start, y_end, z_start, z_end , dx_new ,)p
0 50(dx_new, dx_new \);)p
0 51(})p
0 53(void Microenvironment::resize_densities\( int new_size \))p
0 54({)p
0 55(        zero.assign\( new_size, 0.0 \);)p
0 56(        one.assign\( new_size , 1.0 \);)p
0 58(        temporary_density_vectors1.assign\( mesh.voxels.size\(\) , zero \);)p
0 59(        temporary_density_vectors2.assign\( mesh.voxels.size\(\) , zero \);)p
0 61(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 62(        {)p
0 63(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
0 64(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
1 0(                {)p
1 1(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
1 2(                })p
1 3(        })p
1 4(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
1 6(        diffusion_coefficients.assign\( new_size , 0.0 \);)p
1 7(        decay_rates.assign\( new_size , 0.0 \);)p
1 9(        density_names.assign\( new_size, "unnamed" \);)p
1 10(        density_units.assign\( new_size , "none" \);)p
1 12(        one_half = one;)p
1 13(        one_half *= 0.5;)p
1 15(        one_third = one;)p
1 16(        one_third /= 3.0;)p
1 18(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
1 19(        dirichlet_activation_vector.assign\( new_size, true \);)p
1 21(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\), dirichlet_activ)p
1 22(ation_vector \);)p
1 24(        default_microenvironment_options.Dirichlet_condition_vector.assign\( new_)p
1 25(size , 1.0 \);)p
1 26(        default_microenvironment_options.Dirichlet_activation_vector.assign\( new)p
1 27(_size, true \);)p
1 29(        default_microenvironment_options.initial_condition_vector.assign\( new_si)p
1 30(ze , 1.0 \);)p
1 32(        default_microenvironment_options.Dirichlet_all.assign\( new_size , true \))p
1 33(;)p
1 34(//      default_microenvironment_options.Dirichlet_interior.assign\( new_size, tr)p
1 35(ue \);)p
1 36(        default_microenvironment_options.Dirichlet_xmin.assign\( new_size , false)p
1 37( \);)p
1 38(        default_microenvironment_options.Dirichlet_xmax.assign\( new_size , false)p
1 39( \);)p
1 40(        default_microenvironment_options.Dirichlet_ymin.assign\( new_size , false)p
1 41( \);)p
1 42(        default_microenvironment_options.Dirichlet_ymax.assign\( new_size , false)p
1 43( \);)p
1 44(        default_microenvironment_options.Dirichlet_zmin.assign\( new_size , false)p
1 45( \);)p
1 46(        default_microenvironment_options.Dirichlet_zmax.assign\( new_size , false)p
1 47( \);)p
1 49(        default_microenvironment_options.Dirichlet_xmin_values.assign\( new_size)p
1 50(, 1.0 \);)p
1 51(        default_microenvironment_options.Dirichlet_xmax_values.assign\( new_size)p
1 52(, 1.0 \);)p
1 53(        default_microenvironment_options.Dirichlet_ymin_values.assign\( new_size)p
1 54(, 1.0 \);)p
1 55(        default_microenvironment_options.Dirichlet_ymax_values.assign\( new_size)p
1 56(, 1.0 \);)p
1 57(        default_microenvironment_options.Dirichlet_zmin_values.assign\( new_size)p
1 58(, 1.0 \);)p
1 59(        default_microenvironment_options.Dirichlet_zmax_values.assign\( new_size)p
1 60(, 1.0 \);)p
1 62(        return;)p
1 63(})p
Endpage
%%Page 9 5
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       5)H
0 0(void Microenvironment::add_density\( void \))p
0 1({)p
0 2(        // fix in PhysiCell preview November 2017)p
0 3(        // default_microenvironment_options.use_oxygen_as_first_field = false;)p
0 5(        // update 1, 0)p
0 6(        zero.push_back\( 0.0 \);)p
0 7(        one.push_back\( 1.0 \);)p
0 9(        // update units)p
0 10(        density_names.push_back\( "unnamed" \);)p
0 11(        density_units.push_back\( "none" \);)p
0 13(        // update coefficients)p
0 14(        diffusion_coefficients.push_back\( 0.0 \);)p
0 15(        decay_rates.push_back\( 0.0 \);)p
0 17(        // update sources and such)p
0 18(        for\( unsigned int i=0; i < temporary_density_vectors1.size\(\) ; i++ \))p
0 19(        {)p
0 20(                temporary_density_vectors1[i].push_back\( 0.0 \);)p
0 21(                temporary_density_vectors2[i].push_back\( 0.0 \);)p
0 22(        })p
0 24(        // resize the gradient data structures)p
0 25(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 26(        {)p
0 27(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
0 28(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
0 29(                {)p
0 30(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
0 31(                })p
0 32(        })p
0 34(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
0 36(        one_half = one;)p
0 37(        one_half *= 0.5;)p
0 39(        one_third = one;)p
0 40(        one_third /= 3.0;)p
0 42(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
0 43(        dirichlet_activation_vector.push_back\( true \);)p
0 44(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\), dirichlet_activ)p
0 45(ation_vector \);)p
0 47(        // Fixes in PhysiCell preview November 2017)p
0 48(        default_microenvironment_options.Dirichlet_condition_vector.push_back\( 1)p
0 49(.0 \); //  = one;)p
0 50(        default_microenvironment_options.Dirichlet_activation_vector.push_back\()p
0 51(true \); // assign\( number_of_densities\(\), true \);)p
0 53(        default_microenvironment_options.initial_condition_vector.push_back\( 1.0)p
0 54( \);)p
0 56(        default_microenvironment_options.Dirichlet_all.push_back\( true \);)p
0 57(//      default_microenvironment_options.Dirichlet_interior.push_back\( true \);)p
0 58(        default_microenvironment_options.Dirichlet_xmin.push_back\( false \);)p
0 59(        default_microenvironment_options.Dirichlet_xmax.push_back\( false \);)p
0 60(        default_microenvironment_options.Dirichlet_ymin.push_back\( false \);)p
0 61(        default_microenvironment_options.Dirichlet_ymax.push_back\( false \);)p
0 62(        default_microenvironment_options.Dirichlet_zmin.push_back\( false \);)p
0 63(        default_microenvironment_options.Dirichlet_zmax.push_back\( false \);)p
1 0(        default_microenvironment_options.Dirichlet_xmin_values.push_back\( 1.0 \);)p
1 1(        default_microenvironment_options.Dirichlet_xmax_values.push_back\( 1.0 \);)p
1 2(        default_microenvironment_options.Dirichlet_ymin_values.push_back\( 1.0 \);)p
1 3(        default_microenvironment_options.Dirichlet_ymax_values.push_back\( 1.0 \);)p
1 4(        default_microenvironment_options.Dirichlet_zmin_values.push_back\( 1.0 \);)p
1 5(        default_microenvironment_options.Dirichlet_zmax_values.push_back\( 1.0 \);)p
1 7(        return;)p
1 8(})p
1 10(void Microenvironment::add_density\( std::string name , std::string units \))p
1 11({)p
1 12(        // fix in PhysiCell preview November 2017)p
1 13(        // default_microenvironment_options.use_oxygen_as_first_field = false;)p
1 15(        // update 1, 0)p
1 16(        zero.push_back\( 0.0 \);)p
1 17(        one.push_back\( 1.0 \);)p
1 19(        // update units)p
1 20(        density_names.push_back\( name \);)p
1 21(        density_units.push_back\( units \);)p
1 23(        // update coefficients)p
1 24(        diffusion_coefficients.push_back\( 0.0 \);)p
1 25(        decay_rates.push_back\( 0.0 \);)p
1 27(        // update sources and such)p
1 28(        for\( unsigned int i=0; i < temporary_density_vectors1.size\(\) ; i++ \))p
1 29(        {)p
1 30(                temporary_density_vectors1[i].push_back\( 0.0 \);)p
1 31(                temporary_density_vectors2[i].push_back\( 0.0 \);)p
1 32(        })p
1 34(        // resize the gradient data structures,)p
1 35(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
1 36(        {)p
1 37(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
1 38(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
1 39(                {)p
1 40(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
1 41(                })p
1 42(        })p
1 43(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
1 45(        one_half = one;)p
1 46(        one_half *= 0.5;)p
1 48(        one_third = one;)p
1 49(        one_third /= 3.0;)p
1 51(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
1 52(        dirichlet_activation_vector.push_back\( true \);)p
1 53(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\), dirichlet_activ)p
1 54(ation_vector \);)p
1 56(        // fix in PhysiCell preview November 2017)p
1 57(        default_microenvironment_options.Dirichlet_condition_vector.push_back\( 1)p
1 58(.0 \); //  = one;)p
1 59(        default_microenvironment_options.Dirichlet_activation_vector.push_back\()p
1 60(true \); // assign\( number_of_densities\(\), true \);)p
1 62(        default_microenvironment_options.Dirichlet_all.push_back\( true \);)p
1 63(//      default_microenvironment_options.Dirichlet_interior.push_back\( true \);)p
1 64(        default_microenvironment_options.Dirichlet_xmin.push_back\( false \);)p
Endpage
%%Page 11 6
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       6)H
0 0(        default_microenvironment_options.Dirichlet_xmax.push_back\( false \);)p
0 1(        default_microenvironment_options.Dirichlet_ymin.push_back\( false \);)p
0 2(        default_microenvironment_options.Dirichlet_ymax.push_back\( false \);)p
0 3(        default_microenvironment_options.Dirichlet_zmin.push_back\( false \);)p
0 4(        default_microenvironment_options.Dirichlet_zmax.push_back\( false \);)p
0 6(        default_microenvironment_options.Dirichlet_xmin_values.push_back\( 1.0 \);)p
0 7(        default_microenvironment_options.Dirichlet_xmax_values.push_back\( 1.0 \);)p
0 8(        default_microenvironment_options.Dirichlet_ymin_values.push_back\( 1.0 \);)p
0 9(        default_microenvironment_options.Dirichlet_ymax_values.push_back\( 1.0 \);)p
0 10(        default_microenvironment_options.Dirichlet_zmin_values.push_back\( 1.0 \);)p
0 11(        default_microenvironment_options.Dirichlet_zmax_values.push_back\( 1.0 \);)p
0 13(        default_microenvironment_options.initial_condition_vector.push_back\( 1.0)p
0 14( \);)p
0 16(        return;)p
0 17(})p
0 19(void Microenvironment::add_density\( std::string name , std::string units, double)p
0 20( diffusion_constant, double decay_rate \))p
0 21({)p
0 22(        // fix in PhysiCell preview November 2017)p
0 23(        // default_microenvironment_options.use_oxygen_as_first_field = false;)p
0 25(        // update 1, 0)p
0 26(        zero.push_back\( 0.0 \);)p
0 27(        one.push_back\( 1.0 \);)p
0 29(        // update units)p
0 30(        density_names.push_back\( name \);)p
0 31(        density_units.push_back\( units \);)p
0 33(        // update coefficients)p
0 34(        diffusion_coefficients.push_back\( diffusion_constant \);)p
0 35(        decay_rates.push_back\( decay_rate \);)p
0 37(        // update sources and such)p
0 38(        for\( unsigned int i=0; i < temporary_density_vectors1.size\(\) ; i++ \))p
0 39(        {)p
0 40(                temporary_density_vectors1[i].push_back\( 0.0 \);)p
0 41(                temporary_density_vectors2[i].push_back\( 0.0 \);)p
0 42(        })p
0 44(        // resize the gradient data structures)p
0 45(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 46(        {)p
0 47(                gradient_vectors[k].resize\( number_of_densities\(\) \);)p
0 48(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
0 49(                {)p
0 50(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
0 51(                })p
0 52(        })p
0 53(        gradient_vector_computed.resize\( mesh.voxels.size\(\) , false \);)p
0 55(        one_half = one;)p
0 56(        one_half *= 0.5;)p
0 58(        one_third = one;)p
0 59(        one_third /= 3.0;)p
0 61(        dirichlet_value_vectors.assign\( mesh.voxels.size\(\), one \);)p
0 62(        dirichlet_activation_vector.push_back\( true \);)p
0 63(        dirichlet_activation_vectors.assign\( mesh.voxels.size\(\), dirichlet_activ)p
0 64(ation_vector \);)p
1 1(        // fix in PhysiCell preview November 2017)p
1 2(        default_microenvironment_options.Dirichlet_condition_vector.push_back\( 1)p
1 3(.0 \); // = one;)p
1 4(        default_microenvironment_options.Dirichlet_activation_vector.push_back\()p
1 5(true \); // assign\( number_of_densities\(\), true \);)p
1 7(        default_microenvironment_options.initial_condition_vector.push_back\( 1.0)p
1 8( \);)p
1 10(        default_microenvironment_options.Dirichlet_all.push_back\( true \);)p
1 11(//      default_microenvironment_options.Dirichlet_interior.push_back\( true \);)p
1 12(        default_microenvironment_options.Dirichlet_xmin.push_back\( false \);)p
1 13(        default_microenvironment_options.Dirichlet_xmax.push_back\( false \);)p
1 14(        default_microenvironment_options.Dirichlet_ymin.push_back\( false \);)p
1 15(        default_microenvironment_options.Dirichlet_ymax.push_back\( false \);)p
1 16(        default_microenvironment_options.Dirichlet_zmin.push_back\( false \);)p
1 17(        default_microenvironment_options.Dirichlet_zmax.push_back\( false \);)p
1 19(        default_microenvironment_options.Dirichlet_xmin_values.push_back\( 1.0 \);)p
1 20(        default_microenvironment_options.Dirichlet_xmax_values.push_back\( 1.0 \);)p
1 21(        default_microenvironment_options.Dirichlet_ymin_values.push_back\( 1.0 \);)p
1 22(        default_microenvironment_options.Dirichlet_ymax_values.push_back\( 1.0 \);)p
1 23(        default_microenvironment_options.Dirichlet_zmin_values.push_back\( 1.0 \);)p
1 24(        default_microenvironment_options.Dirichlet_zmax_values.push_back\( 1.0 \);)p
1 26(        return;)p
1 27(})p
1 29(int Microenvironment::find_density_index\( std::string name \))p
1 30({)p
1 31(        for\( unsigned int i=0; i < density_names.size\(\) ; i++ \))p
1 32(        {)p
1 33(                if\( density_names[i] == name \))p
1 34(                { return i; })p
1 35(        })p
1 36(        return -1;)p
1 37(})p
1 39(void Microenvironment::set_density\( int index , std::string name , std::string u)p
1 40(nits \))p
1 41({)p
1 42(        // fix in PhysiCell preview November 2017)p
1 43(        if\( index == 0 \))p
1 44(        { default_microenvironment_options.use_oxygen_as_first_field = false; })p
1 46(        density_names[index] = name;)p
1 47(        density_units[index] = units;)p
1 48(        return;)p
1 49(})p
1 51(void Microenvironment::set_density\( int index , std::string name , std::string u)p
1 52(nits , double diffusion_constant , double decay_rate \))p
1 53({)p
1 54(        // fix in PhysiCell preview November 2017)p
1 55(        if\( index == 0 \))p
1 56(        { default_microenvironment_options.use_oxygen_as_first_field = false; })p
1 58(        density_names[index] = name;)p
1 59(        density_units[index] = units;)p
1 61(        diffusion_coefficients[index] = diffusion_constant;)p
1 62(        decay_rates[index] = decay_rate;)p
1 63(        return;)p
1 64(})p
Endpage
%%Page 13 7
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       7)H
0 1(int Microenvironment::voxel_index\( int i, int j, int k \))p
0 2({ return mesh.voxel_index\(i,j,k\) ; })p
0 4(std::vector<unsigned int> Microenvironment::cartesian_indices\( int n \))p
0 5({ return mesh.cartesian_indices\( n \); })p
0 7(int Microenvironment::nearest_voxel_index\( std::vector<double>& position \))p
0 8({ return mesh.nearest_voxel_index\( position \); })p
0 10(Voxel& Microenvironment::voxels\( int voxel_index \))p
0 11({ return mesh.voxels[voxel_index]; })p
0 13(std::vector<unsigned int> Microenvironment::nearest_cartesian_indices\( std::vect)p
0 14(or<double>& position \))p
0 15({ return mesh.nearest_cartesian_indices\( position \); })p
0 17(Voxel& Microenvironment::nearest_voxel\( std::vector<double>& position \))p
0 18({ return mesh.nearest_voxel\( position \); })p
0 20(std::vector<double>& Microenvironment::nearest_density_vector\( std::vector<doubl)p
0 21(e>& position \))p
0 22({ return \(*p_density_vectors\)[ mesh.nearest_voxel_index\( position \) ]; })p
0 24(std::vector<double>& Microenvironment::nearest_density_vector\( int voxel_index \))p
0 25({ return \(*p_density_vectors\)[ voxel_index ]; })p
0 27(std::vector<double>& Microenvironment::operator\(\)\( int i, int j, int k \))p
0 28({ return \(*p_density_vectors\)[ voxel_index\(i,j,k\) ]; })p
0 30(std::vector<double>& Microenvironment::operator\(\)\( int i, int j \))p
0 31({ return \(*p_density_vectors\)[ voxel_index\(i,j,0\) ]; })p
0 33(std::vector<double>& Microenvironment::operator\(\)\( int n \))p
0 34({ return \(*p_density_vectors\)[ n ]; })p
0 36(std::vector<double>& Microenvironment::density_vector\( int i, int j, int k \))p
0 37({ return \(*p_density_vectors\)[ voxel_index\(i,j,k\) ]; })p
0 39(std::vector<double>& Microenvironment::density_vector\( int i, int j \))p
0 40({ return \(*p_density_vectors\)[ voxel_index\(i,j,0\) ]; })p
0 42(std::vector<double>& Microenvironment::density_vector\( int n \))p
0 43({ return \(*p_density_vectors\)[ n ]; })p
0 45(void Microenvironment::simulate_diffusion_decay\( double dt \))p
0 46({)p
0 47(        if\( diffusion_decay_solver \))p
0 48(        { diffusion_decay_solver\( *this, dt \); })p
0 49(        else)p
0 50(        {)p
0 51(                std::cout << "Warning: diffusion-reaction-source/sink solver not)p
0 52( set for Microenvironment object at " << this << ". Nothing happened!" << std::e)p
0 53(ndl;)p
0 54(                std::cout << "   Consider using Microenvironment::auto_choose_di)p
0 55(ffusion_decay_solver\(void\) ... " << std::endl)p
0 56(                << std::endl;)p
0 57(        })p
0 58(        return;)p
0 59(})p
0 61(void Microenvironment::auto_choose_diffusion_decay_solver\( void \))p
0 62({)p
0 63(        // set the safest choice)p
0 64(        diffusion_decay_solver = diffusion_decay_solver__constant_coefficients_e)p
1 0(xplicit;)p
1 2(        std::cout << "Warning: auto-selection of diffusion-decay-source/sink sol)p
1 3(ver not fully implemented!" << std::endl;)p
1 5( // eventual logic: if non-Cartesian, use explicit)p
1 6( // if Cartesian, if non-variable, use the constant coefficient super-fast code)p
1 7( // otherwise, use the variable coefficient code)p
1 9(})p
1 11(void Microenvironment::display_information\( std::ostream& os \))p
1 12({)p
1 13(        os << std::endl << "Microenvironment summary: " << name << ": " << std::)p
1 14(endl;)p
1 15(        mesh.display_information\( os \);)p
1 16(        os << "Densities: \(" << number_of_densities\(\) << " total\)" << std::endl;)p
1 17(        for\( unsigned int i = 0 ; i < density_names.size\(\) ; i++ \))p
1 18(        {)p
1 19(                os << "   " << density_names[i] << ":" << std::endl)p
1 20(                << "     units: " << density_units[i] << std::endl)p
1 21(                << "     diffusion coefficient: " << diffusion_coefficients[i])p
1 22(                        << " " << spatial_units << "^2 / " << time_units << std:)p
1 23(:endl)p
1 24(                << "     decay rate: " << decay_rates[i])p
1 25(                        << " " << time_units << "^-1" << std::endl)p
1 26(                << "     diffusion length scale: " << sqrt\( diffusion_coefficien)p
1 27(ts[i] / \( 1e-12 + decay_rates[i] \) \))p
1 28(                        << " " << spatial_units << std::endl)p
1 29(                << "     initial condition: " << default_microenvironment_option)p
1 30(s.initial_condition_vector[i])p
1 31(                        << " " << density_units[i] << std::endl)p
1 32(                << "     boundary condition: " << default_microenvironment_optio)p
1 33(ns.Dirichlet_condition_vector[i])p
1 34(                        << " " << density_units[i] << " \(enabled: ";)p
1 35(                if\( dirichlet_activation_vector[i] == true \))p
1 36(                { os << "true"; })p
1 37(                else)p
1 38(                { os << "false"; })p
1 39(                os << "\)" << std::endl;)p
1 40(        })p
1 41(        os << std::endl;)p
1 43(        return;)p
1 44(})p
1 46(unsigned int Microenvironment::number_of_densities\( void \))p
1 47({ return \(*p_density_vectors\)[0].size\(\); })p
1 49(unsigned int Microenvironment::number_of_voxels\( void \))p
1 50({ return mesh.voxels.size\(\); })p
1 52(unsigned int Microenvironment::number_of_voxel_faces\( void \))p
1 53({ return mesh.voxel_faces.size\(\); })p
1 55(void Microenvironment::write_to_matlab\( std::string filename \))p
1 56({)p
1 57(        int number_of_data_entries = mesh.voxels.size\(\);)p
1 58(        int size_of_each_datum = 3 + 1 + \(*p_density_vectors\)[0].size\(\);)p
1 60(        FILE* fp = write_matlab_header\( size_of_each_datum, number_of_data_entri)p
1 61(es,  filename, "multiscale_microenvironment" \);)p
1 63(        // storing data as cols)p
1 64(        for\( int i=0; i < number_of_data_entries ; i++ \))p
Endpage
%%Page 15 8
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       8)H
0 0(        {)p
0 1(                fwrite\( \(char*\) &\( mesh.voxels[i].center[0] \) , sizeof\(double\) ,)p
0 2( 1 , fp \);)p
0 3(                fwrite\( \(char*\) &\( mesh.voxels[i].center[1] \) , sizeof\(double\) ,)p
0 4( 1 , fp \);)p
0 5(                fwrite\( \(char*\) &\( mesh.voxels[i].center[2] \) , sizeof\(double\) ,)p
0 6( 1 , fp \);)p
0 7(                fwrite\( \(char*\) &\( mesh.voxels[i].volume \) , sizeof\(double\) , 1)p
0 8(, fp \);)p
0 10(                // densities)p
0 12(                for\( unsigned int j=0 ; j < \(*p_density_vectors\)[i].size\(\) ; j++)p
0 13(\))p
0 14(                { fwrite\( \(char*\) &\( \(\(*p_density_vectors\)[i]\)[j] \) , sizeof\(dou)p
0 15(ble\) , 1 , fp \); })p
0 16(        })p
0 18(        fclose\( fp \);)p
0 19(        return;)p
0 20(})p
0 24(void Microenvironment::simulate_bulk_sources_and_sinks\( double dt \))p
0 25({)p
0 26(        if\( !bulk_source_sink_solver_setup_done \))p
0 27(        {)p
0 28(                bulk_source_sink_solver_temp1.resize\( mesh.voxels.size\(\) , zero)p
0 29(\);)p
0 30(                bulk_source_sink_solver_temp2.resize\( mesh.voxels.size\(\) , zero)p
0 31(\);)p
0 32(                bulk_source_sink_solver_temp3.resize\( mesh.voxels.size\(\) , zero)p
0 33(\);)p
0 35(                bulk_source_sink_solver_setup_done = true;)p
0 36(        })p
0 38(        #pragma omp parallel for)p
0 39(        for\( unsigned int i=0; i < mesh.voxels.size\(\) ; i++ \))p
0 40(        {)p
0 41(                bulk_supply_rate_function\( this,i, &bulk_source_sink_solver_temp)p
0 42(1[i] \); // temp1 = S)p
0 43(                bulk_supply_target_densities_function\( this,i, &bulk_source_sink)p
0 44(_solver_temp2[i]\); // temp2 = T)p
0 45(                bulk_uptake_rate_function\( this,i, &bulk_source_sink_solver_temp)p
0 46(3[i] \); // temp3 = U)p
0 49(                bulk_source_sink_solver_temp2[i] *= bulk_source_sink_solver_temp)p
0 50(1[i]; // temp2 = S*T)p
0 51(                axpy\( &\(*p_density_vectors\)[i] , dt , bulk_source_sink_solver_te)p
0 52(mp2[i] \); // out = out + dt*temp2 = out + dt*S*T)p
0 53(                bulk_source_sink_solver_temp3[i] += bulk_source_sink_solver_temp)p
0 54(1[i]; // temp3 = U+S)p
0 55(                bulk_source_sink_solver_temp3[i] *= dt; // temp3 = dt*\(U+S\))p
0 56(                bulk_source_sink_solver_temp3[i] += one; // temp3 = 1 + dt*\(U+S\))p
0 58(                \(*p_density_vectors\)[i] /= bulk_source_sink_solver_temp3[i];)p
0 59(        })p
0 61(        return;)p
0 62(})p
0 64(void Microenvironment::simulate_cell_sources_and_sinks\( std::vector<Basic_Agent*)p
1 0(>& basic_agent_list , double dt \))p
1 1({)p
1 2(        #pragma omp parallel for)p
1 3(        for\( unsigned int i=0 ; i < basic_agent_list.size\(\) ; i++ \))p
1 4(        {)p
1 5(                basic_agent_list[i]->simulate_secretion_and_uptake\( this , dt \);)p
1 6(        })p
1 8(        return;)p
1 9(})p
1 11(void Microenvironment::simulate_cell_sources_and_sinks\( double dt \))p
1 12({)p
1 13(        simulate_cell_sources_and_sinks\(all_basic_agents, dt\);)p
1 14(})p
1 16(void Microenvironment::update_rates\( void \))p
1 17({)p
1 18(        if\( supply_target_densities_times_supply_rates.size\(\) != number_of_voxel)p
1 19(s\(\) \))p
1 20(        { supply_target_densities_times_supply_rates.assign\( number_of_voxels\(\))p
1 21(, zero \); })p
1 23(        if\( supply_rates.size\(\) != number_of_voxels\(\) \))p
1 24(        { supply_rates.assign\( number_of_voxels\(\) , zero \); })p
1 26(        if\( uptake_rates.size\(\) != number_of_voxels\(\) \))p
1 27(        { uptake_rates.assign\( number_of_voxels\(\) , zero \); })p
1 29(        #pragma omp parallel for)p
1 30(        for\( unsigned int i=0 ; i < number_of_voxels\(\) ; i++ \))p
1 31(        {)p
1 32(                bulk_uptake_rate_function\( this,i, &\(uptake_rates[i]\) \);)p
1 33(                bulk_supply_rate_function\( this,i, &\(supply_rates[i]\) \);)p
1 34(                bulk_supply_target_densities_function\( this,i, &\(supply_target_d)p
1 35(ensities_times_supply_rates[i]\) \);)p
1 37(                supply_target_densities_times_supply_rates[i] *= supply_rates[i])p
1 38(;)p
1 39(        })p
1 40(        return;)p
1 41(})p
1 43(std::vector<gradient>& Microenvironment::gradient_vector\(int i, int j, int k\))p
1 44({)p
1 45(        int n = voxel_index\(i,j,k\);)p
1 46(        if\( gradient_vector_computed[n] == false \))p
1 47(        {)p
1 48(                compute_gradient_vector\( n \);)p
1 49(        })p
1 51(        return gradient_vectors[n];)p
1 52(})p
1 54(std::vector<gradient>& Microenvironment::gradient_vector\(int i, int j \))p
1 55({)p
1 56(        int n = voxel_index\(i,j,0\);)p
1 57(        if\( gradient_vector_computed[n] == false \))p
1 58(        {)p
1 59(                compute_gradient_vector\( n \);)p
1 60(        })p
1 62(        return gradient_vectors[n];)p
1 63(})p
Endpage
%%Page 17 9
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
       9)H
0 0(std::vector<gradient>& Microenvironment::gradient_vector\(int n \))p
0 1({)p
0 2(        // if the gradient has not yet been computed, then do it!)p
0 3(        if\( gradient_vector_computed[n] == false \))p
0 4(        {)p
0 5(                compute_gradient_vector\( n \);)p
0 6(        })p
0 9(        return gradient_vectors[n];)p
0 10(})p
0 12(std::vector<gradient>& Microenvironment::nearest_gradient_vector\( std::vector<do)p
0 13(uble>& position \))p
0 14({)p
0 15(        int n = nearest_voxel_index\( position \);)p
0 16(        if\( gradient_vector_computed[n] == false \))p
0 17(        {)p
0 18(                compute_gradient_vector\( n \);)p
0 19(        })p
0 21(        return gradient_vectors[n];)p
0 22(})p
0 24(void Microenvironment::compute_all_gradient_vectors\( void \))p
0 25({)p
0 26(        static double two_dx = mesh.dx;)p
0 27(        static double two_dy = mesh.dy;)p
0 28(        static double two_dz = mesh.dz;)p
0 29(        static bool gradient_constants_defined = false;)p
0 30(        if\( gradient_constants_defined == false \))p
0 31(        {)p
0 32(                two_dx *= 2.0;)p
0 33(                two_dy *= 2.0;)p
0 34(                two_dz *= 2.0;)p
0 35(                gradient_constants_defined = true;)p
0 36(        })p
0 38(        #pragma omp parallel for)p
0 39(        for\( unsigned int k=0; k < mesh.z_coordinates.size\(\) ; k++ \))p
0 40(        {)p
0 41(                for\( unsigned int j=0; j < mesh.y_coordinates.size\(\) ; j++ \))p
0 42(                {)p
0 43(                        // endcaps)p
0 44(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
0 45(                        {)p
0 46(                                int i = 0;)p
0 47(                                int n = voxel_index\(i,j,k\);)p
0 48(                                // x-derivative of qth substrate at voxel n)p
0 49(                                gradient_vectors[n][q][0] = \(*p_density_vectors\))p
0 50([n+thomas_i_jump][q];)p
0 51(                                gradient_vectors[n][q][0] -= \(*p_density_vectors)p
0 52(\)[n][q];)p
0 53(                                gradient_vectors[n][q][0] /= mesh.dx;)p
0 55(                                gradient_vector_computed[n] = true;)p
0 56(                        })p
0 57(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
0 58(                        {)p
0 59(                                int i = mesh.x_coordinates.size\(\)-1;)p
0 60(                                int n = voxel_index\(i,j,k\);)p
0 61(                                // x-derivative of qth substrate at voxel n)p
0 62(                                gradient_vectors[n][q][0] = \(*p_density_vectors\))p
0 63([n][q];)p
0 64(                                gradient_vectors[n][q][0] -= \(*p_density_vectors)p
1 0(\)[n-thomas_i_jump][q];)p
1 1(                                gradient_vectors[n][q][0] /= mesh.dx;)p
1 3(                                gradient_vector_computed[n] = true;)p
1 4(                        })p
1 6(                        for\( unsigned int i=1; i < mesh.x_coordinates.size\(\)-1 ;)p
1 7( i++ \))p
1 8(                        {)p
1 9(                                for\( unsigned int q=0; q < number_of_densities\(\))p
1 10( ; q++ \))p
1 11(                                {)p
1 12(                                        int n = voxel_index\(i,j,k\);)p
1 13(                                        // x-derivative of qth substrate at voxe)p
1 14(l n)p
1 15(                                        gradient_vectors[n][q][0] = \(*p_density_)p
1 16(vectors\)[n+thomas_i_jump][q];)p
1 17(                                        gradient_vectors[n][q][0] -= \(*p_density)p
1 18(_vectors\)[n-thomas_i_jump][q];)p
1 19(                                        gradient_vectors[n][q][0] /= two_dx;)p
1 21(                                        gradient_vector_computed[n] = true;)p
1 22(                                })p
1 23(                        })p
1 25(                })p
1 26(        })p
1 28(        #pragma omp parallel for)p
1 29(        for\( unsigned int k=0; k < mesh.z_coordinates.size\(\) ; k++ \))p
1 30(        {)p
1 31(                for\( unsigned int i=0; i < mesh.x_coordinates.size\(\) ; i++ \))p
1 32(                {)p
1 33(                        // endcaps)p
1 34(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
1 35(                        {)p
1 36(                                int j = 0;)p
1 37(                                int n = voxel_index\(i,j,k\);)p
1 38(                                // x-derivative of qth substrate at voxel n)p
1 39(                                gradient_vectors[n][q][1] = \(*p_density_vectors\))p
1 40([n+thomas_j_jump][q];)p
1 41(                                gradient_vectors[n][q][1] -= \(*p_density_vectors)p
1 42(\)[n][q];)p
1 43(                                gradient_vectors[n][q][1] /= mesh.dy;)p
1 45(                                gradient_vector_computed[n] = true;)p
1 46(                        })p
1 47(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
1 48(                        {)p
1 49(                                int j = mesh.y_coordinates.size\(\)-1;)p
1 50(                                int n = voxel_index\(i,j,k\);)p
1 51(                                // x-derivative of qth substrate at voxel n)p
1 52(                                gradient_vectors[n][q][1] = \(*p_density_vectors\))p
1 53([n][q];)p
1 54(                                gradient_vectors[n][q][1] -= \(*p_density_vectors)p
1 55(\)[n-thomas_j_jump][q];)p
1 56(                                gradient_vectors[n][q][1] /= mesh.dy;)p
1 58(                                gradient_vector_computed[n] = true;)p
1 59(                        })p
1 61(                        for\( unsigned int j=1; j < mesh.y_coordinates.size\(\)-1 ;)p
1 62( j++ \))p
1 63(                        {)p
1 64(                                for\( unsigned int q=0; q < number_of_densities\(\))p
Endpage
%%Page 19 10
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
      10)H
0 0( ; q++ \))p
0 1(                                {)p
0 2(                                        int n = voxel_index\(i,j,k\);)p
0 3(                                        // y-derivative of qth substrate at voxe)p
0 4(l n)p
0 5(                                        gradient_vectors[n][q][1] = \(*p_density_)p
0 6(vectors\)[n+thomas_j_jump][q];)p
0 7(                                        gradient_vectors[n][q][1] -= \(*p_density)p
0 8(_vectors\)[n-thomas_j_jump][q];)p
0 9(                                        gradient_vectors[n][q][1] /= two_dy;)p
0 10(                                        gradient_vector_computed[n] = true;)p
0 11(                                })p
0 12(                        })p
0 14(                })p
0 15(        })p
0 17(        // don't bother computing z component if there is no z-directoin)p
0 18(        if\( mesh.z_coordinates.size\(\) == 1 \))p
0 19(        { return; })p
0 21(        #pragma omp parallel for)p
0 22(        for\( unsigned int j=0; j < mesh.y_coordinates.size\(\) ; j++ \))p
0 23(        {)p
0 24(                for\( unsigned int i=0; i < mesh.x_coordinates.size\(\) ; i++ \))p
0 25(                {)p
0 26(                        // endcaps)p
0 27(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
0 28(                        {)p
0 29(                                int k = 0;)p
0 30(                                int n = voxel_index\(i,j,k\);)p
0 31(                                // x-derivative of qth substrate at voxel n)p
0 32(                                gradient_vectors[n][q][2] = \(*p_density_vectors\))p
0 33([n+thomas_k_jump][q];)p
0 34(                                gradient_vectors[n][q][2] -= \(*p_density_vectors)p
0 35(\)[n][q];)p
0 36(                                gradient_vectors[n][q][2] /= mesh.dz;)p
0 38(                                gradient_vector_computed[n] = true;)p
0 39(                        })p
0 40(                        for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
0 41(                        {)p
0 42(                                int k = mesh.z_coordinates.size\(\)-1;)p
0 43(                                int n = voxel_index\(i,j,k\);)p
0 44(                                // x-derivative of qth substrate at voxel n)p
0 45(                                gradient_vectors[n][q][2] = \(*p_density_vectors\))p
0 46([n][q];)p
0 47(                                gradient_vectors[n][q][2] -= \(*p_density_vectors)p
0 48(\)[n-thomas_k_jump][q];)p
0 49(                                gradient_vectors[n][q][2] /= mesh.dz;)p
0 51(                                gradient_vector_computed[n] = true;)p
0 52(                        })p
0 54(                        for\( unsigned int k=1; k < mesh.z_coordinates.size\(\)-1 ;)p
0 55( k++ \))p
0 56(                        {)p
0 57(                                for\( unsigned int q=0; q < number_of_densities\(\))p
0 58( ; q++ \))p
0 59(                                {)p
0 60(                                        int n = voxel_index\(i,j,k\);)p
0 61(                                        // y-derivative of qth substrate at voxe)p
0 62(l n)p
0 63(                                        gradient_vectors[n][q][2] = \(*p_density_)p
0 64(vectors\)[n+thomas_k_jump][q];)p
1 0(                                        gradient_vectors[n][q][2] -= \(*p_density)p
1 1(_vectors\)[n-thomas_k_jump][q];)p
1 2(                                        gradient_vectors[n][q][2] /= two_dz;)p
1 3(                                        gradient_vector_computed[n] = true;)p
1 4(                                })p
1 5(                        })p
1 7(                })p
1 8(        })p
1 10(        return;)p
1 11(})p
1 13(void Microenvironment::compute_gradient_vector\( int n \))p
1 14({)p
1 15(        static double two_dx = mesh.dx;)p
1 16(        static double two_dy = mesh.dy;)p
1 17(        static double two_dz = mesh.dz;)p
1 18(        static bool gradient_constants_defined = false;)p
1 19(        std::vector<unsigned int> indices\(3,0\);)p
1 21(        if\( gradient_constants_defined == false \))p
1 22(        {)p
1 23(                two_dx *= 2.0;)p
1 24(                two_dy *= 2.0;)p
1 25(                two_dz *= 2.0;)p
1 26(                gradient_constants_defined = true;)p
1 27(        })p
1 29(        indices = cartesian_indices\( n \);)p
1 31(        // d/dx)p
1 32(        if\( indices[0] > 0 && indices[0] < mesh.x_coordinates.size\(\)-1 \))p
1 33(        {)p
1 34(                for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
1 35(                {)p
1 36(                        gradient_vectors[n][q][0] = \(*p_density_vectors\)[n+thoma)p
1 37(s_i_jump][q];)p
1 38(                        gradient_vectors[n][q][0] -= \(*p_density_vectors\)[n-thom)p
1 39(as_i_jump][q];)p
1 40(                        gradient_vectors[n][q][0] /= two_dx;)p
1 41(                        gradient_vector_computed[n] = true;)p
1 42(                })p
1 43(        })p
1 45(        // don't bother computing y and z component if there is no y-direction.)p
1 46(\(1D\))p
1 47(        if\( mesh.y_coordinates.size\(\) == 1 \))p
1 48(        { return; })p
1 50(        // d/dy)p
1 51(        if\( indices[1] > 0 && indices[1] < mesh.y_coordinates.size\(\)-1 \))p
1 52(        {)p
1 53(                for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
1 54(                {)p
1 55(                        gradient_vectors[n][q][1] = \(*p_density_vectors\)[n+thoma)p
1 56(s_j_jump][q];)p
1 57(                        gradient_vectors[n][q][1] -= \(*p_density_vectors\)[n-thom)p
1 58(as_j_jump][q];)p
1 59(                        gradient_vectors[n][q][1] /= two_dy;)p
1 60(                        gradient_vector_computed[n] = true;)p
1 61(                })p
1 62(        })p
1 64(        // don't bother computing z component if there is no z-direction \(2D\))p
Endpage
%%Page 21 11
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
      11)H
0 0(        if\( mesh.z_coordinates.size\(\) == 1 \))p
0 1(        { return; })p
0 3(        // d/dz)p
0 4(        if\( indices[2] > 0 && indices[2] < mesh.z_coordinates.size\(\)-1 \))p
0 5(        {)p
0 6(                for\( unsigned int q=0; q < number_of_densities\(\) ; q++ \))p
0 7(                {)p
0 8(                        gradient_vectors[n][q][2] = \(*p_density_vectors\)[n+thoma)p
0 9(s_k_jump][q];)p
0 10(                        gradient_vectors[n][q][2] -= \(*p_density_vectors\)[n-thom)p
0 11(as_k_jump][q];)p
0 12(                        gradient_vectors[n][q][2] /= two_dz;)p
0 13(                        gradient_vector_computed[n] = true;)p
0 14(                })p
0 15(        })p
0 17(        return;)p
0 18(})p
0 20(void Microenvironment::reset_all_gradient_vectors\( void \))p
0 21({)p
0 22(        for\( unsigned int k=0 ; k < mesh.voxels.size\(\) ; k++ \))p
0 23(        {)p
0 24(                for\( unsigned int i=0 ; i < number_of_densities\(\) ; i++ \))p
0 25(                {)p
0 26(                        \(gradient_vectors[k]\)[i].resize\( 3, 0.0 \);)p
0 27(                })p
0 28(        })p
0 29(        gradient_vector_computed.assign\( mesh.voxels.size\(\) , false \);)p
0 30(})p
0 33(Microenvironment microenvironment;)p
0 35(Microenvironment_Options::Microenvironment_Options\(\))p
0 36({)p
0 37(        use_oxygen_as_first_field = true;)p
0 39(        if\( get_default_microenvironment\(\) != NULL \))p
0 40(        {)p
0 41(                pMicroenvironment = get_default_microenvironment\(\);)p
0 42(        })p
0 43(        else)p
0 44(        {)p
0 45(                pMicroenvironment = &microenvironment;)p
0 46(                set_default_microenvironment\( pMicroenvironment \);)p
0 47(        })p
0 48(        name = "microenvironment";)p
0 50(        time_units = "min";)p
0 51(        spatial_units = "micron";)p
0 52(        dx = 20;)p
0 53(        dy = 20;)p
0 54(        dz = 20;)p
0 56(        outer_Dirichlet_conditions = false;)p
0 57(        Dirichlet_condition_vector.assign\( pMicroenvironment->number_of_densitie)p
0 58(s\(\) , 1.0 \);)p
0 59(        Dirichlet_activation_vector.assign\( pMicroenvironment->number_of_densiti)p
0 60(es\(\) , true \);)p
0 62(        initial_condition_vector.resize\(0\); //  = Dirichlet_condition_vector;)p
0 64(        // set a far-field value for oxygen \(assumed to be in the first field\))p
1 0(        Dirichlet_condition_vector[0] = 38.0;)p
1 2(        simulate_2D = false;)p
1 4(        X_range.resize\(2,500.0\);)p
1 5(        X_range[0] *= -1.0;)p
1 7(        Y_range.resize\(2,500.0\);)p
1 8(        Y_range[0] *= -1.0;)p
1 10(        Z_range.resize\(2,500.0\);)p
1 11(        Z_range[0] *= -1.0;)p
1 13(        calculate_gradients = false;)p
1 15(        track_internalized_substrates_in_each_agent = false;)p
1 17(        Dirichlet_all.push_back\( true \);)p
1 18(//      Dirichlet_interior.push_back\( true \);)p
1 19(        Dirichlet_xmin.push_back\( false \);)p
1 20(        Dirichlet_xmax.push_back\( false \);)p
1 21(        Dirichlet_ymin.push_back\( false \);)p
1 22(        Dirichlet_ymax.push_back\( false \);)p
1 23(        Dirichlet_zmin.push_back\( false \);)p
1 24(        Dirichlet_zmax.push_back\( false \);)p
1 26(        default_microenvironment_options.Dirichlet_xmin_values.push_back\( 1.0 \);)p
1 27(        default_microenvironment_options.Dirichlet_xmax_values.push_back\( 1.0 \);)p
1 28(        default_microenvironment_options.Dirichlet_ymin_values.push_back\( 1.0 \);)p
1 29(        default_microenvironment_options.Dirichlet_ymax_values.push_back\( 1.0 \);)p
1 30(        default_microenvironment_options.Dirichlet_zmin_values.push_back\( 1.0 \);)p
1 31(        default_microenvironment_options.Dirichlet_zmax_values.push_back\( 1.0 \);)p
1 33(        return;)p
1 34(})p
1 36(Microenvironment_Options default_microenvironment_options;)p
1 38(void initialize_microenvironment\( void \))p
1 39({)p
1 40(        // create and name a microenvironment;)p
1 41(        microenvironment.name = default_microenvironment_options.name;)p
1 42(        // register the diffusion solver)p
1 43(        if\( default_microenvironment_options.simulate_2D == true \))p
1 44(        {)p
1 45(                microenvironment.diffusion_decay_solver = diffusion_decay_solver)p
1 46(__constant_coefficients_LOD_2D;)p
1 47(        })p
1 48(        else)p
1 49(        {)p
1 50(                microenvironment.diffusion_decay_solver = diffusion_decay_solver)p
1 51(__constant_coefficients_LOD_3D;)p
1 52(        })p
1 54(        // set the default substrate to oxygen \(with typical units of mmHg\))p
1 55(        if\( default_microenvironment_options.use_oxygen_as_first_field == true \))p
1 56(        {)p
1 57(                microenvironment.set_density\(0, "oxygen" , "mmHg" \);)p
1 58(                microenvironment.diffusion_coefficients[0] = 1e5;)p
1 59(                microenvironment.decay_rates[0] = 0.1;)p
1 60(        })p
1 62(        // resize the microenvironment)p
1 63(        if\( default_microenvironment_options.simulate_2D == true \))p
1 64(        {)p
Endpage
%%Page 23 12
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
      12)H
0 0(                default_microenvironment_options.Z_range[0] = -default_microenvi)p
0 1(ronment_options.dz/2.0;)p
0 2(                default_microenvironment_options.Z_range[1] = default_microenvir)p
0 3(onment_options.dz/2.0;)p
0 4(        })p
0 5(        microenvironment.resize_space\( default_microenvironment_options.X_range[)p
0 6(0], default_microenvironment_options.X_range[1] ,)p
0 7(                default_microenvironment_options.Y_range[0], default_microenviro)p
0 8(nment_options.Y_range[1],)p
0 9(                default_microenvironment_options.Z_range[0], default_microenviro)p
0 10(nment_options.Z_range[1],)p
0 11(                default_microenvironment_options.dx,default_microenvironment_opt)p
0 12(ions.dy,default_microenvironment_options.dz \);)p
0 14(        // set units)p
0 15(        microenvironment.spatial_units = default_microenvironment_options.spatia)p
0 16(l_units;)p
0 17(        microenvironment.time_units = default_microenvironment_options.time_unit)p
0 18(s;)p
0 19(        microenvironment.mesh.units = default_microenvironment_options.spatial_u)p
0 20(nits;)p
0 22(        // set the initial densities to the values set in the initial_condition_)p
0 23(vector)p
0 25(        // if the initial condition vector has not been set, use the Dirichlet c)p
0 26(ondition vector)p
0 27(        if\( default_microenvironment_options.initial_condition_vector.size\(\) !=)p
0 28(                microenvironment.number_of_densities\(\) \))p
0 29(        {)p
0 30(                std::cout << "BioFVM Warning: Initial conditions not set. " << s)p
0 31(td::endl)p
0 32(                                  << "                Using Dirichlet condition)p
0 33(vector to set initial substrate values!" << std::endl)p
0 34(                                  << "                In the future, set default)p
0 35(_microenvironment_options.initial_condition_vector.")p
0 36(                                  << std::endl << std::endl;)p
0 37(                default_microenvironment_options.initial_condition_vector = defa)p
0 38(ult_microenvironment_options.Dirichlet_condition_vector;)p
0 39(        })p
0 41(        // set the initial condition)p
0 42(        for\( unsigned int n=0; n < microenvironment.number_of_voxels\(\) ; n++ \))p
0 43(        { microenvironment.density_vector\(n\) = default_microenvironment_options.)p
0 44(initial_condition_vector; })p
0 46(        // now, figure out which sides have BCs \(for at least one substrate\):)p
0 48(        bool xmin = false;)p
0 49(        bool xmax = false;)p
0 50(        bool ymin = false;)p
0 51(        bool ymax = false;)p
0 52(        bool zmin = false;)p
0 53(        bool zmax = false;)p
0 55(        if\( default_microenvironment_options.outer_Dirichlet_conditions == true)p
0 56(\))p
0 57(        {)p
0 58(                for\( int n=0 ; n < microenvironment.number_of_densities\(\) ; n++)p
0 59(\))p
0 60(                {)p
0 61(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
0 62(                                default_microenvironment_options.Dirichlet_xmin[)p
0 63(n] \))p
0 64(                                { xmin = true; })p
1 1(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
1 2(                                default_microenvironment_options.Dirichlet_xmax[)p
1 3(n] \))p
1 4(                                { xmax = true; })p
1 6(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
1 7(                                default_microenvironment_options.Dirichlet_ymin[)p
1 8(n] \))p
1 9(                                { ymin = true; })p
1 11(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
1 12(                                default_microenvironment_options.Dirichlet_ymax[)p
1 13(n] \))p
1 14(                                { ymax = true; })p
1 16(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
1 17(                                default_microenvironment_options.Dirichlet_zmin[)p
1 18(n] \))p
1 19(                                { zmin = true; })p
1 21(                        if\( default_microenvironment_options.Dirichlet_all[n] ||)p
1 22(                                default_microenvironment_options.Dirichlet_zmax[)p
1 23(n] \))p
1 24(                                { zmax = true; })p
1 25(                })p
1 27(                // add the Dirichlet nodes in the right places)p
1 29(        })p
1 30(        std::cout << "which boundaries?" << std::endl;)p
1 31(        std::cout << xmin << " " << xmax << " " << ymin << " " << ymax << " " <<)p
1 32( zmin << " " << zmax << std::endl;)p
1 34(        // add the Dirichlet nodes in the right places)p
1 35(        // now, go in and set the values)p
1 36(        if\( default_microenvironment_options.outer_Dirichlet_conditions == true)p
1 37(\))p
1 38(        {)p
1 39(                // set xmin if xmin = true or all = true)p
1 40(                if\( xmin == true \))p
1 41(                {)p
1 42(                        for\( unsigned int k=0 ; k < microenvironment.mesh.z_coor)p
1 43(dinates.size\(\) ; k++ \))p
1 44(                        {)p
1 45(                                int I = 0;)p
1 46(                                // set Dirichlet conditions along the xmin outer)p
1 47( edges)p
1 48(                                for\( unsigned int j=0 ; j < microenvironment.mes)p
1 49(h.y_coordinates.size\(\) ; j++ \))p
1 50(                                {)p
1 51(                                        // set the value)p
1 52(                                        microenvironment.add_dirichlet_node\( mic)p
1 53(roenvironment.voxel_index\(I,j,k\) , default_microenvironment_options.Dirichlet_xm)p
1 54(in_values \);)p
1 56(                                        // set the activation)p
1 57(                                        microenvironment.set_substrate_dirichlet)p
1 58(_activation\( microenvironment.voxel_index\(I,j,k\) ,)p
1 59(                                        default_microenvironment_options.Dirichl)p
1 60(et_xmin \);)p
1 62(                                })p
1 63(                        })p
1 64(                })p
Endpage
%%Page 25 13
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
      13)H
0 1(                // set xmax if xmax = true or all = true)p
0 2(                if\( xmax == true \))p
0 3(                {)p
0 4(                        for\( unsigned int k=0 ; k < microenvironment.mesh.z_coor)p
0 5(dinates.size\(\) ; k++ \))p
0 6(                        {)p
0 7(                                int I = microenvironment.mesh.x_coordinates.size)p
0 8(\(\)-1;;)p
0 9(                                // set Dirichlet conditions along the xmax outer)p
0 10( edges)p
0 11(                                for\( unsigned int j=0 ; j < microenvironment.mes)p
0 12(h.y_coordinates.size\(\) ; j++ \))p
0 13(                                {)p
0 14(                                        // set the values)p
0 15(                                        microenvironment.add_dirichlet_node\( mic)p
0 16(roenvironment.voxel_index\(I,j,k\) , default_microenvironment_options.Dirichlet_xm)p
0 17(ax_values \);)p
0 19(                                        // set the activation)p
0 20(                                        microenvironment.set_substrate_dirichlet)p
0 21(_activation\( microenvironment.voxel_index\(I,j,k\) ,)p
0 22(                                        default_microenvironment_options.Dirichl)p
0 23(et_xmax \);)p
0 24(                                })p
0 25(                        })p
0 26(                })p
0 28(                // set ymin if ymin = true or all = true)p
0 29(                if\( ymin == true \))p
0 30(                {)p
0 31(                        for\( unsigned int k=0 ; k < microenvironment.mesh.z_coor)p
0 32(dinates.size\(\) ; k++ \))p
0 33(                        {)p
0 34(                                int J = 0; // microenvironment.mesh.x_coordinate)p
0 35(s.size\(\)-1;;)p
0 36(                                // set Dirichlet conditions along the ymin outer)p
0 37( edges)p
0 38(                                for\( unsigned int i=0 ; i < microenvironment.mes)p
0 39(h.x_coordinates.size\(\) ; i++ \))p
0 40(                                {)p
0 41(                                        // set the values)p
0 42(                                        microenvironment.add_dirichlet_node\( mic)p
0 43(roenvironment.voxel_index\(i,J,k\) , default_microenvironment_options.Dirichlet_ym)p
0 44(in_values \);)p
0 46(                                        // set the activation)p
0 47(                                        microenvironment.set_substrate_dirichlet)p
0 48(_activation\( microenvironment.voxel_index\(i,J,k\) ,)p
0 49(                                        default_microenvironment_options.Dirichl)p
0 50(et_ymin \);)p
0 51(                                })p
0 52(                        })p
0 53(                })p
0 55(                // set ymzx if ymax = true or all = true;)p
0 56(                if\( ymax == true \))p
0 57(                {)p
0 58(                        for\( unsigned int k=0 ; k < microenvironment.mesh.z_coor)p
0 59(dinates.size\(\) ; k++ \))p
0 60(                        {)p
0 61(                                int J = microenvironment.mesh.y_coordinates.size)p
0 62(\(\)-1;;)p
0 63(                                // set Dirichlet conditions along the ymin outer)p
0 64( edges)p
1 0(                                for\( unsigned int i=0 ; i < microenvironment.mes)p
1 1(h.x_coordinates.size\(\) ; i++ \))p
1 2(                                {)p
1 3(                                        // set the value)p
1 4(                                        microenvironment.add_dirichlet_node\( mic)p
1 5(roenvironment.voxel_index\(i,J,k\) , default_microenvironment_options.Dirichlet_ym)p
1 6(ax_values \);)p
1 8(                                        // set the activation)p
1 9(                                        microenvironment.set_substrate_dirichlet)p
1 10(_activation\( microenvironment.voxel_index\(i,J,k\) ,)p
1 11(                                        default_microenvironment_options.Dirichl)p
1 12(et_ymax \);)p
1 13(                                })p
1 14(                        })p
1 15(                })p
1 17(                // if not 2D:)p
1 18(                if\( default_microenvironment_options.simulate_2D == false \))p
1 19(                {)p
1 20(                        // set zmin if zmin = true or all = true)p
1 21(                        if\( zmin == true \))p
1 22(                        {)p
1 23(                                for\( unsigned int j=0 ; j < microenvironment.mes)p
1 24(h.y_coordinates.size\(\) ; j++ \))p
1 25(                                {)p
1 26(                                        int K = 0; // microenvironment.mesh.z_co)p
1 27(ordinates.size\(\)-1;;)p
1 28(                                        // set Dirichlet conditions along the ym)p
1 29(in outer edges)p
1 30(                                        for\( unsigned int i=0 ; i < microenviron)p
1 31(ment.mesh.x_coordinates.size\(\) ; i++ \))p
1 32(                                        {)p
1 33(                                                // set the value)p
1 34(                                                microenvironment.add_dirichlet_n)p
1 35(ode\( microenvironment.voxel_index\(i,j,K\) , default_microenvironment_options.Diri)p
1 36(chlet_zmin_values \);)p
1 38(                                                // set the activation)p
1 39(                                                microenvironment.set_substrate_d)p
1 40(irichlet_activation\( microenvironment.voxel_index\(i,j,K\) ,)p
1 41(                                                default_microenvironment_options)p
1 42(.Dirichlet_zmin \);)p
1 43(                                        })p
1 44(                                })p
1 45(                        })p
1 47(                        // set zmax if zmax = true or all = true)p
1 48(                        if\( zmax == true \))p
1 49(                        {)p
1 50(                                for\( unsigned int j=0 ; j < microenvironment.mes)p
1 51(h.y_coordinates.size\(\) ; j++ \))p
1 52(                                {)p
1 53(                                        int K = microenvironment.mesh.z_coordina)p
1 54(tes.size\(\)-1;;)p
1 55(                                        // set Dirichlet conditions along the ym)p
1 56(in outer edges)p
1 57(                                        for\( unsigned int i=0 ; i < microenviron)p
1 58(ment.mesh.x_coordinates.size\(\) ; i++ \))p
1 59(                                        {)p
1 60(                                                // set the value)p
1 61(                                                microenvironment.add_dirichlet_n)p
1 62(ode\( microenvironment.voxel_index\(i,j,K\) , default_microenvironment_options.Diri)p
1 63(chlet_zmax_values \);)p
Endpage
%%Page 27 14
Startpage
(BioFVM_microenvironment.cpp                                       Mon Jul 18 21:44:38 2022
      14)H
0 0(                                                // set the activation)p
0 1(                                                microenvironment.set_substrate_d)p
0 2(irichlet_activation\( microenvironment.voxel_index\(i,j,K\) ,)p
0 3(                                                default_microenvironment_options)p
0 4(.Dirichlet_zmax \);)p
0 5(                                        })p
0 6(                                })p
0 7(                        })p
0 8(                })p
0 10(        })p
0 12(/*)p
0 13(        if\( default_microenvironment_options.outer_Dirichlet_conditions == true)p
0 14(\))p
0 15(        {)p
0 17(                for\( unsigned int k=0 ; k < microenvironment.mesh.z_coordinates.)p
0 18(size\(\) ; k++ \))p
0 19(                {)p
0 20(                        // set Dirichlet conditions along the 4 outer edges)p
0 21(                        for\( unsigned int i=0 ; i < microenvironment.mesh.x_coor)p
0 22(dinates.size\(\) ; i++ \))p
0 23(                        {)p
0 24(                                int J = microenvironment.mesh.y_coordinates.size)p
0 25(\(\)-1;)p
0 26(                                microenvironment.add_dirichlet_node\( microenviro)p
0 27(nment.voxel_index\(i,0,k\) , default_microenvironment_options.Dirichlet_condition_)p
0 28(vector \);)p
0 29(                                microenvironment.add_dirichlet_node\( microenviro)p
0 30(nment.voxel_index\(i,J,k\) , default_microenvironment_options.Dirichlet_condition_)p
0 31(vector \);)p
0 32(                        })p
0 33(                        int I = microenvironment.mesh.x_coordinates.size\(\)-1;)p
0 34(                        for\( unsigned int j=1; j < microenvironment.mesh.y_coord)p
0 35(inates.size\(\)-1 ; j++ \))p
0 36(                        {)p
0 37(                                microenvironment.add_dirichlet_node\( microenviro)p
0 38(nment.voxel_index\(0,j,k\) , default_microenvironment_options.Dirichlet_condition_)p
0 39(vector \);)p
0 40(                                microenvironment.add_dirichlet_node\( microenviro)p
0 41(nment.voxel_index\(I,j,k\) , default_microenvironment_options.Dirichlet_condition_)p
0 42(vector \);)p
0 43(                        })p
0 44(                })p
0 45(                // if 3-D, also along the corresponding additional faces)p
0 46(                if\( default_microenvironment_options.simulate_2D == false \))p
0 47(                {)p
0 48(                        int K = microenvironment.mesh.z_coordinates.size\(\)-1;)p
0 49(                        for\( unsigned int j=1 ; j < microenvironment.mesh.y_coor)p
0 50(dinates.size\(\)-1 ; j++ \))p
0 51(                        {)p
0 52(                                for\( unsigned int i=1; i < microenvironment.mesh)p
0 53(.x_coordinates.size\(\)-1 ; i++ \))p
0 54(                                {)p
0 55(                                        microenvironment.add_dirichlet_node\( mic)p
0 56(roenvironment.voxel_index\(i,j,0\) , default_microenvironment_options.Dirichlet_co)p
0 57(ndition_vector \);)p
0 58(                                        microenvironment.add_dirichlet_node\( mic)p
0 59(roenvironment.voxel_index\(i,j,K\) , default_microenvironment_options.Dirichlet_co)p
0 60(ndition_vector \);)p
0 61(                                })p
0 62(                        })p
0 63(                })p
1 0(        })p
1 1(*/)p
1 3(        // set the Dirichlet condition activation vector to match the microenvir)p
1 4(onment options)p
1 5(        for\( int i=0 ; i < default_microenvironment_options.Dirichlet_activation)p
1 6(_vector.size\(\); i++ \))p
1 7(        {)p
1 8(                microenvironment.set_substrate_dirichlet_activation\( i , default)p
1 9(_microenvironment_options.Dirichlet_activation_vector[i] \);)p
1 10(        })p
1 12(        microenvironment.display_information\( std::cout \);)p
1 13(        return;)p
1 14(})p
1 16(};)p
Endpage
%%Trailer
PSPend
